import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { WalletAddressService } from '../../wallet_address/wallet_address.service';
import { TransactionService } from 'src/transaction/transaction.service';
import { OrderService } from '../../order/order.service';

@Injectable()
export class CronService {
  private readonly logger = new Logger(CronService.name);

  constructor(
    private readonly walletService: WalletAddressService,
    private readonly transactionService: TransactionService,
    private readonly orderService: OrderService,
  ) {}

  // –≠—Ç–æ—Ç –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
  @Cron('*/20 * * * * *')
  async handleCron() {
    this.logger.debug('‚è∞ –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞');

    const wallets = await this.walletService.findAll();

    for (const wallet of wallets) {
      try {
        const { balance } = await this.walletService.checkBalance(wallet.id);

        if (balance > 0) {
          const existingTx = await this.transactionService.findByWallet(
            wallet.address,
          );

          if (!existingTx) {
            await this.transactionService.create({
              fromAddress: 'external',
              toAddress: wallet.address,
              amount: balance,
              txHash: 'generated_or_fetched',
              network: 'TRON',
              status: 'success',
              orderId: wallet.order_id,
            });

            await this.orderService.updateStatusByWalletAddress(
              wallet.address,
              'paid',
            );

            this.logger.log(
              `üí∏ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: ${wallet.address}`,
            );
          }
        }
      } catch (err) {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–∞ ${wallet.address}:`,
          err.message,
        );
      }
    }
  }
}
